#!/usr/bin/env ruby

begin require "readit"
rescue LoadError
  puts "Can't locate `readit` RubyGem. Please install it."
  Process.exit(1)
end

begin require 'cgi'
rescue LoadError
  puts 'Can\'t locate `cgi` RubyGem. Please install it.'
  Process.exit(1)
end

begin require_relative "./readability_token"
rescue LoadError
  puts "Can't locate Readability API token in `Read::READABILITY_TOKEN`. Make sure it's set."
  Process.exit(1)
end

module Read
  class ReadArticle
    def initialize
      if Read::READABILITY_TOKEN.nil?
        puts "Can't locate Readability API token in `Read::READABILITY_TOKEN`. Make sure it's set."
      end

      @parser = Readit::Parser.new(Read::READABILITY_TOKEN)

      @url = ARGV[0]
      if @url.nil? || @url.strip == ""
        @asked_for_url = false
        ask_for_url
      end
    end

    def ask_for_url
      while @url.nil? || @url.strip == ""
        feedback = "Please tell me what page to read: "
        print feedback

        if @asked_for_url
          say feedback
        end
        @url = gets.chomp
        @asked_for_url = true
      end
      get_article
    end

    def get_article
      puts "Fetching page contents..."
      say "Fetching page contents"

      article = @parser.parse(@url)

      if article.nil or article.content.nil?
        @url = nil
        feedback = "Invalid page URL"
        puts feedback
        say feedback
        ask_for_url
        return
      end

      # remove HTML tags and surrounding whitespace
      @article_content_stripped = [
        "#{article.title||""}\n\n\n\n\n\n\n",
        CGI.unescapeHTML(article.content.gsub(/<\/?[^>]*>/, "")).strip
      ].join

      # start reading
      @print_thread = Thread.new { print_article }
      @read_thread = Thread.new { read_article }
      @print_thread.join
      @read_thread.join
    end

    private

    def print_article
      puts "\n----------"
      @article_content_stripped.each_char do |char|
        print char
        sleep 0.06
      end

      if defined?(@read_thread) and @read_thread.alive?
        Thread.kill(@read_thread)
      end
    end

    def read_article
      say @article_content_stripped
      if defined?(@print_thread) and @print_thread.alive?
        Thread.kill(@print_thread)
      end
    end

    def say(command, voice="Samantha")
      command = "\"#{command}\""
      unless voice.nil?
        command += " -v #{voice}"
      end

      `say #{command}`
    end
  end
end

trap("SIGINT") { Process.exit(0) }
Read::ReadArticle.new
